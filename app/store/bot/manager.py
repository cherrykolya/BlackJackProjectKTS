import typing
import json

from logging import getLogger
from datetime import datetime
from app.store.vk_api.dataclasses import Update, Message, UpdateObject
from app.blackjack.models import User, Player, Table
from app.store.bot.state import (
    TableState,
    PlayerState,
    Buttons,
    CallbackButtons,
    EventTypes,
    GameResults,
)
from app.store.bot.deck import Deck
from app.store.blackjack.accessor import BlackJackAccessor

if typing.TYPE_CHECKING:
    from app.web.app import Application


class BotManager:
    def __init__(self, app: "Application"):
        self.app = app
        self.bot = None
        self.logger = getLogger("handler")

    async def handle_updates(self, updates: list[Update]):
        for update in updates:
            current_table = await self.blackjack.get_table_by_peer_id(update.peer_id)
            if current_table is None:
                current_table = await self.create_table(update.peer_id)

            username = await self.app.store.vk_api.get_username(update.user_id)
            await self.blackjack.create_user(
                User(
                    update.user_id, username, str({}), User.START_CASH, User.START_WINS
                )
            )
            try:
                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ callback –∫–Ω–æ–ø–∫—É
                if update.type == EventTypes.MESSAGE_EVENT:
                    await self.process_callback_button_pressed(update, current_table)

                # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —á–∞—Ç–∞
                if update.type == EventTypes.MESSAGE_NEW:
                    await self.process_new_command(update, current_table)
            except Exception:
                await self.handle_error(update, current_table)

    async def button_response_handler(self, response_button: CallbackButtons):
        button_handler = {
            CallbackButtons.REG: self.handle_registration,
            CallbackButtons.ADD_CARD: self.draw_card,
            CallbackButtons.END_TURN: self.end_turn,
            CallbackButtons.PLACE_BET: self.register_bets,
        }
        return button_handler[response_button]

    async def button_sender(self, table_state: TableState):
        button_to_send = {
            TableState.WAITING_REG: [
                [Buttons.START_REG.value],
                [Buttons.INFO.value],
                [Buttons.RULES.value],
            ],
            TableState.START_REG: [
                [Buttons.REG_USER.value],
                [Buttons.STOP_REG.value],
                [Buttons.INFO.value],
            ],
            TableState.STOP_REG: [
                [Buttons.START_BETS.value],
                [Buttons.INFO.value],
                [Buttons.END_GAME.value],
            ],
            TableState.START_BETS: [
                [
                    Buttons.BET_1.value,
                    Buttons.BET_2.value,
                    Buttons.BET_3.value,
                    Buttons.BET_4.value,
                ],
                [Buttons.INFO.value],
                [Buttons.END_GAME.value],
            ],
            TableState.STOP_BETS: [
                [Buttons.START_GAME.value],
                [Buttons.INFO.value],
                [Buttons.END_GAME.value],
            ],
            TableState.START_GAME: [
                [Buttons.ADD_CARD.value, Buttons.END_TURN.value],
                [Buttons.INFO.value],
                [Buttons.END_GAME.value],
            ],
            TableState.END_GAME: [
                [Buttons.START_REG.value],
                [Buttons.INFO.value],
                [Buttons.RULES.value],
            ],
            TableState.INFO: [],
            TableState.RULES: [],
        }
        return button_to_send[table_state]

    async def context_manager(self, table_state: TableState):
        function_to_call = {
            TableState.START_REG: self.handle_start_reg,
            TableState.STOP_REG: self.handle_stop_reg,
            TableState.START_BETS: self.handle_start_bets,
            TableState.STOP_BETS: self.handle_stop_bets,
            TableState.START_GAME: self.handle_start_game,
            TableState.INFO: self.handle_info,
            TableState.RULES: self.handle_rules,
            TableState.END_GAME: self.handle_end_game,
        }
        return function_to_call[table_state]

    async def handle_error(self, update: Update, current_table: Table):
        await self.blackjack.delete_table(current_table.id)
        text = "–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...<br>"
        text += "–¢–µ–∫—É—â–∏–π —Å—Ç–æ–ª –±—ã–ª —É–¥–∞–ª–µ–Ω, –∞ –±–∞–Ω–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω<br>"
        text += "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É!"
        keyboard = await self.keyboard_constructor(TableState.END_GAME.str)
        await self.send_message(update, text, keyboard)

    async def process_new_command(self, update: Update, current_table: Table):
        command = update.text

        if update.payload:
            command = json.loads(update.payload)["button"]

        if await self.check_state(command, TableState(current_table.state)):
            keyboard = await self.keyboard_constructor(command)
            update_handler = await self.context_manager(TableState(command))
            await update_handler(
                update=update, current_table=current_table, keyboard=keyboard
            )

        # TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif len(command) > 0 and command[0] == "/":
            text = f"–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:<br>"
            for i, state in enumerate(TableState(current_table.state).next_state):
                text += f"{i+1}. {state}<br>"
            keyboard = await self.keyboard_constructor(current_table.state)
            await self.send_message(update, text, keyboard)

    async def process_callback_button_pressed(
        self, update: Update, current_table: Table
    ):
        if update.payload:
            command = update.payload["button"]
        update_handler = await self.button_response_handler(CallbackButtons(command))
        await update_handler(update=update, current_table=current_table)

    async def create_table(self, peer_id: int) -> Table:
        deck = Deck()
        deck.generate_deck()
        deck.shuffle_deck()
        deck = [card.to_dict() for card in deck.deck]
        table = Table(0, peer_id, datetime.now(), deck, TableState.WAITING_REG.str)
        await self.blackjack.create_table(table)
        return await self.blackjack.get_table_by_peer_id(peer_id)

    def player_checker(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞"""

        async def wrapper(self, *args, **kwargs):
            update, current_table = kwargs["update"], kwargs["current_table"]
            current_player = await self.blackjack.get_player_by_id(
                update.user_id, current_table.id
            )
            if current_player is not None:
                await func(self, *args, **kwargs)
            elif update.type == "message_event":
                text = "–í—ã –Ω–µ –≤ –∏–≥—Ä–µ!"
                event_data, params = await self.snackbar_params_constructor(
                    update, text
                )
                await self.app.store.vk_api.send_snackbar(params, event_data)

        return wrapper

    def turn_checker(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""

        async def wrapper(self, update: Update, current_table: Table):
            vk_id = update.user_id
            peer_id = current_table.id
            player = await self.blackjack.get_player_by_id(vk_id, peer_id)
            if player.state == PlayerState.TURN_ACTIVE.str or vk_id == User.DILER_ID:
                await func(self, update, current_table)

            elif player.state == PlayerState.WAITING_TURN.str:
                # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥
                text = f"–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!"
                event_data, params = await self.snackbar_params_constructor(
                    update, text
                )
                await self.app.store.vk_api.send_snackbar(params, event_data)

            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
            elif player.state == PlayerState.TURN_ENDED.str:
                # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
                text = "–í–∞—à —Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."
                event_data, params = await self.snackbar_params_constructor(
                    update, text
                )
                await self.app.store.vk_api.send_snackbar(params, event_data)

        return wrapper

    def balance_checker(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞"""

        async def wrapper(self, update: Update, current_table: Table):
            user = await self.blackjack.get_user_by_id(update.user_id)
            if user.cash > 0:
                await func(self, update, current_table)
            else:
                # –≤—ã—Å—ã–ª–∞–µ–º —Å–Ω—ç–∫–±–∞—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                text = f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å - 0 üíµ!<br>"
                text += "–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å—á–µ—Ç–∞!"
                event_data, params = await self.snackbar_params_constructor(
                    update, text
                )
                await self.app.store.vk_api.send_snackbar(params, event_data)

        return wrapper

    async def check_state(self, command: str, table_state: TableState) -> bool:
        return command in table_state.next_state

    async def handle_info(self, update: Update, current_table: Table, keyboard):
        user = await self.blackjack.get_user_by_id(update.user_id)
        text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{user.vk_id} ({user.username})<br>"
        text += f"–ü–æ–±–µ–¥—ã: {user.num_of_wins} üèÜ<br>"
        text += f"–ë–∞–Ω–∫: {user.cash} üíµ<br>"
        text += f"id: {user.vk_id} ‚öôÔ∏è<br>"

        await self.send_message(update, text)

    async def handle_rules(self, update: Update, current_table: Table, keyboard):
        from app.store.bot.rules import rules

        text = rules
        await self.send_message(update, text)

    @player_checker
    async def handle_end_game(self, update: Update, current_table: Table, keyboard):
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
        await self.blackjack.set_table_state(current_table.id, TableState.END_GAME.str)
        user = await self.blackjack.get_user_by_id(update.user_id)
        text = f"–ò–≥—Ä–æ–∫ @id{user.vk_id} ({user.username}) –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –º–∞—Ç—á!<br>"

        # –≤—ã—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
        await self.send_message(update, text, keyboard)

    @balance_checker
    async def handle_registration(self, update: Update, current_table: Table):
        vk_id = update.user_id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        if await self.blackjack.get_player_by_id(vk_id, current_table.id) is None:
            username = await self.app.store.vk_api.get_username(update.user_id)
            # await self.blackjack.create_user(User(vk_id, username, str({}), 1000, 0))
            await self.blackjack.create_player(
                Player(vk_id, current_table.id, [], PlayerState.WAITING_TURN.str, 0)
            )

            # –≤—ã—Å—ã–ª–∞–µ–º —Å–Ω—ç–∫–±–∞—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            text = "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!"
            event_data, params = await self.snackbar_params_constructor(update, text)
            await self.app.store.vk_api.send_snackbar(params, event_data)
            text = f"@id{vk_id} ({username}) —Å–∞–¥–∏—Ç—Å—è –∑–∞ —Å—Ç–æ–ª!<br>"
            await self.send_message(update, text)

            # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –∑–∞ —Å—Ç–æ–ª–æ–º 6 —á–µ–ª–æ–≤–µ–∫
            players = await self.blackjack.get_players_on_table(current_table.id)
            if len(players) > 4:
                keyboard = await self.keyboard_constructor(TableState.STOP_REG.str)
                await self.handle_stop_reg(
                    update=update, current_table=current_table, keyboard=keyboard
                )

        else:
            # –≤—ã—Å—ã–ª–∞–µ–º —Å–Ω—ç–∫–±–∞—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!"
            event_data, params = await self.snackbar_params_constructor(update, text)
            await self.app.store.vk_api.send_snackbar(params, event_data)

    @player_checker
    async def handle_start_game(self, update: Update, current_table: Table, keyboard):
        players = await self.blackjack.get_players_on_table(current_table.id)
        text = "–ü–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏ –∏–≥—Ä–æ–∫–∞–º –≤—ã–ø–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã:<br>"
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–¥—É
        deck = current_table.deck

        for i, player in enumerate(players):
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫—Ä–æ–º–µ –¥–∏–ª–ª–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∞

            if player.vk_id != User.DILER_ID:
                await self.blackjack.set_player_state(
                    player.vk_id, player.table_id, PlayerState.WAITING_TURN.str
                )

            user = await self.blackjack.get_user_by_id(player.vk_id)
            text += f"{i+1}. @id{player.vk_id} ({user.username})<br>"
            cards = []

            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –¥–∏–ª–ª–µ—Ä–∞
            if player.vk_id == User.DILER_ID:
                card = deck.pop()
                cards.append(card)
                text += f"üìú {card}<br>"
            else:
                for _ in range(2):
                    card = deck.pop()
                    cards.append(card)
                    text += f"üìú {card}<br>"

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã –≤ –ë–î –∏–≥—Ä–æ–∫–∞
            await self.blackjack.set_player_cards(player.vk_id, player.table_id, cards)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–¥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ –≤–∑—è—Ç—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
        await self.blackjack.set_table_cards(current_table.id, deck)

        await self.send_message(update, text, keyboard)

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º
        next_player = await self.get_next_player(update, current_table)

    @player_checker
    async def handle_stop_reg(self, update: Update, current_table: Table, keyboard):
        # TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–µ–π—Å –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
        players = await self.blackjack.get_players_on_table(current_table.id)
        if len(players) == 0:
            text = "–ù–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!<br>"
            await self.send_message(update, text)

        else:
            await self.blackjack.create_user(
                User(User.DILER_ID, "–î–∏–ª–ª–µ—Ä", str({}), User.START_CASH, User.START_WINS)
            )
            # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
            await self.blackjack.set_table_state(
                current_table.id, TableState.STOP_REG.str
            )

            # —Å–æ–∑–¥–∞–µ–º –¥–∏–ª–ª–µ—Ä–∞
            await self.blackjack.create_player(
                Player(
                    User.DILER_ID, current_table.id, [], PlayerState.TURN_ENDED.str, 0
                )
            )

            # –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            players = await self.blackjack.get_players_on_table(current_table.id)
            text = f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–∫–æ–Ω—á–µ–Ω–∞.<br>id —Å—Ç–æ–ª–∞: {current_table.id}<br>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:<br>"
            for i, player in enumerate(players):
                user = await self.blackjack.get_user_by_id(player.vk_id)
                text += f"{i+1}. @id{player.vk_id} ({user.username})<br>"

            await self.send_message(update, text, keyboard)

    async def handle_start_reg(self, update: Update, current_table: Table, keyboard):
        # —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –Ω–µ–º –∫–æ–ª–æ–¥—É-—Å—Ç–µ–∫
        # deck = Deck()
        await self.blackjack.set_table_state(
            id=current_table.id, state=TableState.START_REG.str
        )
        text = "–°—ã–≥—Ä–∞–µ–º –≤ BlackJack?"
        await self.send_message(update, text, keyboard)

    @player_checker
    @turn_checker
    async def register_bets(self, update: Update, current_table: Table, keyboard=None):
        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        vk_id = update.user_id
        peer_id = current_table.id

        user = await self.blackjack.get_user_by_id(vk_id)
        val = update.payload["bet"]
        bet = user.cash * val

        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –Ω–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞–≤–∫—É
        await self.blackjack.set_player_state(
            vk_id, peer_id, PlayerState.TURN_ENDED.str
        )
        await self.blackjack.set_player_bet(vk_id, peer_id, bet)

        # –í—ã—Å—ã–ª–∞–µ–º snackbar —Å —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç–∞–≤–∫–∏
        text = f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ {bet} üíµ!"
        event_data, params = await self.snackbar_params_constructor(update, text)
        await self.app.store.vk_api.send_snackbar(params, event_data)

        text = f"@id{vk_id} ({user.username}) –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É {bet} üíµ!<br>"
        text += "<br>"

        # –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞–≤–∫–µ –≤ —á–∞—Ç
        await self.send_message(update, text)

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å c–ª–µ–¥—É—é—â–∏–º
        next_player = await self.get_next_player(
            update, current_table
        )  # self.blackjack.get_next_waiting_player(current_table.id)

        if next_player is None:
            # TODO: –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª –≤ —Ñ–∞–∑—É –∫–æ–Ω—Ü–∞ —Å—Ç–∞–≤–æ–∫
            await self.handle_stop_bets(update, current_table)

    async def get_next_player(self, update: Update, current_table: Table) -> Player:
        next_player = await self.blackjack.get_next_waiting_player(current_table.id)
        text = ""
        if next_player is not None:
            await self.blackjack.set_player_state(
                next_player.vk_id, next_player.table_id, PlayerState.TURN_ACTIVE.str
            )
            next_user = await self.blackjack.get_user_by_id(next_player.vk_id)
            text += f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞ @id{next_user.vk_id} ({next_user.username}) !"
        await self.send_message(update, text)
        return next_player

    @player_checker
    @turn_checker
    async def end_turn(self, update: Update, current_table: Table):
        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        vk_id = update.user_id
        peer_id = current_table.id
        player = await self.blackjack.get_player_by_id(vk_id, peer_id)

        # –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        await self.blackjack.set_player_state(
            vk_id, peer_id, PlayerState.TURN_ENDED.str
        )
        user = await self.blackjack.get_user_by_id(player.vk_id)
        cards = player.cards
        text = f"–ò–≥—Ä–æ–∫ @id{vk_id} ({user.username}) –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–¥ —Å –∫–∞—Ä—Ç–∞–º–∏:<br>"

        for card in cards:
            text += f"üìú {card}<br>"

        # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ –∫–æ–Ω—Ü–µ —Ö–æ–¥
        text = "–í–∞—à —Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω!"
        event_data, params = await self.snackbar_params_constructor(update, text)
        await self.app.store.vk_api.send_snackbar(params, event_data)

        await self.send_message(update, text)

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å c–ª–µ–¥—É—é—â–∏–º
        next_player = await self.get_next_player(update, current_table)

        if next_player is None:
            # TODO: –µ—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 2, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 3 –∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏
            await self.summarize(update, current_table)

    @player_checker
    @turn_checker
    async def draw_card(self, update: Update, current_table: Table):
        vk_id = update.user_id
        peer_id = current_table.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–¥—É-—Å—Ç–µ–∫
        deck = current_table.deck

        player = await self.blackjack.get_player_by_id(vk_id, peer_id)
        # –¥–æ–±–∏–∞—Ä–µ–º –∫–∞—Ä—Ç—É
        user = await self.blackjack.get_user_by_id(player.vk_id)
        text = f"–ò–≥—Ä–æ–∫ @id{vk_id} ({user.username}) –¥–æ–±—Ä–∞–ª –∫–∞—Ä—Ç—É:<br>"
        cards = player.cards
        # —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Å—Ç–µ–∫-–∫–æ–ª–æ–¥—ã
        card = deck.pop()
        text += f"üìú {card}<br>"
        cards.append(card)

        # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–¥—É –∏–≥—Ä–∫–æ–∞ –∏ —Å—Ç–æ–ª–∞ –≤ –ë–î
        await self.blackjack.set_player_cards(vk_id, peer_id, cards)
        await self.blackjack.set_table_cards(peer_id, deck)

        await self.send_message(update, text)

        # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ –¥–æ–±–æ—Ä–µ –∫–∞—Ä—Ç—ã
        if vk_id != User.DILER_ID:
            text = "–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É"
            event_data, params = await self.snackbar_params_constructor(update, text)
            await self.app.store.vk_api.send_snackbar(params, event_data)
        # –ï—Å–ª–∏ —Å—É–º–º–∞ –∫–∞—Ä—Ç –±–æ–ª—å—à–µ 21, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 2
        card_values = [card.value for card in cards]
        if sum(card_values) > 20:
            await self.end_turn(update=update, current_table=current_table)

    async def summarize(self, update: Update, current_table: Table):
        peer_id = current_table.id
        diler = await self.blackjack.get_player_by_id(User.DILER_ID, peer_id)

        # –ö–û–°–¢–´–õ–¨
        diler_update = Update(
            "", UpdateObject(0, Message(User.DILER_ID, peer_id, "", None, None))
        )

        while sum([card.value for card in diler.cards]) < 14:
            await self.draw_card(update=diler_update, current_table=current_table)
            diler = await self.blackjack.get_player_by_id(User.DILER_ID, peer_id)

        # –≤—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ —Ö–æ–¥–∞ –¥–∏–ª–ª–µ—Ä–∞
        cards = diler.cards
        diler_user = await self.blackjack.get_user_by_id(User.DILER_ID)
        text = f"–ò–≥—Ä–æ–∫ @id{diler.vk_id} ({diler_user.username}) –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–¥ —Å –∫–∞—Ä—Ç–∞–º–∏:<br>"

        for card in cards:
            text += f"üìú {card}<br>"

        await self.send_message(update, text)

        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –º–∞—Ç—á–∞
        diler_sum = sum([card.value for card in diler.cards])
        players = await self.blackjack.get_players_on_table(peer_id)
        text = f"–í—Å–µ –∏–≥—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ö–æ–¥, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:<br>"
        n = 0
        for i, player in enumerate(players):
            if player.vk_id == User.DILER_ID:
                n -= 1
            if player.vk_id != User.DILER_ID:
                user = await self.blackjack.get_user_by_id(player.vk_id)
                user_sum = sum([card.value for card in player.cards])
                bet = player.bet

                # TODO: —Å–¥–µ–ª–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–∏–ª–ª–µ—Ä–æ–º
                result = await self.get_game_results(user_sum, diler_sum)

                # TODO: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥—É –≤ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—è, –∏–∑–º–µ–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫
                if result == GameResults.WIN:
                    await self.blackjack.add_win_to_user(player.vk_id)
                    await self.blackjack.set_user_cash(player.vk_id, 2 * bet)
                    text += f"{n+1}. @id{player.vk_id} ({user.username}) - {result}! + {2*bet}üíµ<br>"
                if result == GameResults.LOSS:
                    await self.blackjack.set_user_cash(player.vk_id, -bet)
                    text += f"{n+1}. @id{player.vk_id} ({user.username}) - {result}! - {bet}üíµ<br>"
                if result == GameResults.DRAW:
                    text += f"{n+1}. @id{player.vk_id} ({user.username}) - {result}! - {bet}üíµ<br>"
            n += 1

        # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–æ–ª –≤ –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self.blackjack.set_table_state(peer_id, TableState.END_GAME.str)

        keyboard = await self.keyboard_constructor(TableState.END_GAME.str)
        await self.send_message(update, text, keyboard)

    async def handle_stop_bets(
        self, update: Update, current_table: Table, keyboard=None
    ):
        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ª–∏ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏
        players = await self.blackjack.get_players_on_table(current_table.id)
        if await self.check_all_players_state(players, PlayerState.TURN_ENDED):
            # –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª –≤ —Å–æ—Å–æ—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—Ü —Å—Ç–∞–≤–æ–∫
            await self.blackjack.set_table_state(
                current_table.id, TableState.STOP_BETS.str
            )
            text = "–§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –æ–∫–æ–Ω—á–µ–Ω–∞!<br>–ò–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞–≤–∫–∏:<br>"
            n = 0
            for i, player in enumerate(players):
                if player.vk_id == User.DILER_ID:
                    n -= 1
                if player.vk_id != User.DILER_ID:
                    user = await self.blackjack.get_user_by_id(player.vk_id)
                    text += f"{n+1}. @id{player.vk_id} ({user.username}) - {player.bet} üíµ!<br>"
                n += 1

            keyboard = await self.keyboard_constructor(TableState.STOP_BETS.str)
            await self.send_message(update, text, keyboard)

        else:
            text = "–ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏!"
            await self.send_message(update, text)

    @player_checker
    async def handle_start_bets(self, update: Update, current_table: Table, keyboard):
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–æ–ª –≤ —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
        await self.blackjack.set_table_state(
            current_table.id, TableState.START_BETS.str
        )

        players = await self.blackjack.get_players_on_table(current_table.id)
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
        for i, player in enumerate(players):
            if player.vk_id != User.DILER_ID:
                await self.blackjack.set_player_state(
                    player.vk_id, player.table_id, PlayerState.WAITING_TURN.str
                )

        text = f"–†–∞–∑–º–µ—â–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏!<br>–í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ –æ—Ç —Ç–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞!"
        await self.send_message(update, text, keyboard)
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º
        next_player = await self.get_next_player(update, current_table)

    async def send_message(self, update: Update, text: str, keyboard=None):
        await self.app.store.vk_api.send_message(
            Message(
                user_id=1,
                text=text,
                peer_id=update.peer_id,
                payload=None,
                event_id=None,
            ),
            keyboard=keyboard,
        )

    async def get_game_results(self, user_sum: int, diler_sum: int) -> GameResults:
        if user_sum > 21:
            return GameResults.LOSS
        elif user_sum == 21 and diler_sum == 21:
            return GameResults.DRAW
        elif user_sum == 21 and diler_sum != 21:
            return GameResults.WIN
        elif user_sum < 21 and diler_sum > 21:
            return GameResults.WIN
        elif user_sum < 21 and diler_sum == 21:
            return GameResults.LOSS
        elif user_sum < 21 and user_sum <= diler_sum:
            return GameResults.LOSS
        elif user_sum < 21 and user_sum > diler_sum:
            return GameResults.WIN

    async def check_all_players_state(
        self, players: list[Player], state: PlayerState
    ) -> bool:
        flag = True
        for player in players:
            if player.state != state.str and player.vk_id != User.DILER_ID:
                flag = False
        return flag

    async def keyboard_constructor(self, command: str) -> dict:
        return {
            "one_time": False,
            "inline": False,
            "buttons": await self.button_sender(TableState(command)),
        }

    async def snackbar_params_constructor(
        self, update: Update, text: str
    ) -> tuple[dict, dict]:
        event_data = {"type": "show_snackbar", "text": text}
        params = {
            "event_id": update.object.body.event_id,
            "user_id": update.user_id,
            "peer_id": update.peer_id,
        }
        return event_data, params

    @property
    def blackjack(self) -> BlackJackAccessor:
        return self.app.store.blackjack
