import typing
import random
import json
from logging import getLogger

from app.store.vk_api.dataclasses import Update, Message
from app.blackjack.models import User, Player, Table
from app.store.bot.state import TableState, PlayerState, Buttons
from app.store.bot.deck import Deck

if typing.TYPE_CHECKING:
    from app.web.app import Application


class BotManager:
    def __init__(self, app: "Application"):
        self.app = app
        self.bot = None
        self.logger = getLogger("handler")

    async def handle_updates(self, updates: list[Update]):
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
        for update in updates:
            current_table = await self.app.store.blackjack.get_table_by_peer_id(update.object.peer_id)
            if current_table is None:
                deck = Deck()
                deck.generate_deck()
                deck.shuffle_deck()
                await self.app.store.blackjack.create_table(peer_id=update.object.peer_id, deck = deck, state=TableState.WAITING_REG.str)
                current_table = await self.app.store.blackjack.get_table_by_peer_id(update.object.peer_id)
            
            table_state = TableState(current_table.state)
            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
            if update.type == 'message_event':
                button_type = update.object.body['payload']['button']
                if button_type == "reg":
                    await self.handle_registration(update, current_table)
                if button_type == "add_card":
                    await self.draw_card(update, current_table)
                if button_type == "end_turn":
                    await self.end_turn(update, current_table)
                if button_type == "bet":
                    await self.register_bets(update, current_table)

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —á–∞—Ç–∞
            if update.type == 'message_new':
                command = update.object.body["message"]["text"]
                if "payload" in update.object.body["message"].keys(): 
                    command = json.loads(update.object.body["message"]["payload"])["button"]
                if await self.check_state(command, table_state):
                    keyboard = {  
                        "one_time": False,
                        "inline": False, 
                        "buttons": await self.button_manager(TableState(command))}
                    update_handler = await self.context_manager(TableState(command))
                    await update_handler(update, current_table, keyboard)

                # TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                elif len(command) == 1:
                    if len(command[0]) > 0 and command[0][0] == "/" :
                        text = f"–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        for i, state in  enumerate(table_state.next_state):
                            text += f"{i+1}. {state}\n"
                        await self.app.store.vk_api.send_message(
                            Message(
                                user_id=update.object.user_id,
                                text=text,#update.object.body,
                                peer_id = update.object.peer_id
                            ))
    
    async def button_manager(self, table_state: TableState):
        button_to_send = {  TableState.WAITING_REG: [[Buttons.START_REG.value],
                                                     [Buttons.INFO.value]],
                            TableState.START_REG: [[Buttons.REG_USER.value], 
                                                   [Buttons.STOP_REG.value],
                                                   [Buttons.INFO.value]],
                            TableState.STOP_REG: [[Buttons.START_BETS.value],
                                                  [Buttons.INFO.value],
                                                  [Buttons.END_GAME.value]],
                            TableState.START_BETS: [[Buttons.BET_1.value, Buttons.BET_2.value, Buttons.BET_3.value, Buttons.BET_4.value],
                                                    [Buttons.INFO.value],
                                                    [Buttons.END_GAME.value]],
                            TableState.STOP_BETS: [[Buttons.START_GAME.value],
                                                   [Buttons.INFO.value],
                                                   [Buttons.END_GAME.value]],
                            TableState.START_GAME: [[Buttons.ADD_CARD.value, Buttons.END_TURN.value],
                                                   [Buttons.INFO.value],
                                                   [Buttons.END_GAME.value]],
                            TableState.END_GAME: [[Buttons.START_REG.value],
                                                     [Buttons.INFO.value]],
                            TableState.INFO: []                          
                            #TableState.START_BETS: self.handle_start_bets,
                            #TableState.STOP_BETS: self.handle_stop_bets,
                            #TableState.START_GAME: self.handle_start_game,
                            #TableState.INFO: self.handle_info,
                            #TableState.END_GAME: self.handle_end_game,
                            }
        return button_to_send[table_state]
        

    async def context_manager(self, table_state: TableState):
        function_to_call = {TableState.START_REG: self.handle_start_reg,
                            TableState.STOP_REG: self.handle_stop_reg,
                            TableState.START_BETS: self.handle_start_bets,
                            TableState.STOP_BETS: self.handle_stop_bets,
                            TableState.START_GAME: self.handle_start_game,
                            TableState.INFO: self.handle_info,
                            TableState.END_GAME: self.handle_end_game,}
        return function_to_call[table_state]

    async def check_state(self, command: str, table_state: TableState) -> bool:
        return command in table_state.next_state

    async def handle_info(self, update: Update, current_table: Table, keyboard):
        user = await self.app.store.blackjack.get_user_by_id(update.object.user_id)
        text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @id{user.vk_id} ({user.username})\n"
        text += f"–ü–æ–±–µ–¥—ã: {user.num_of_wins} üèÜ\n"
        text += f"–ë–∞–Ω–∫: {user.cash} üíµ\n"
        await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=text,#update.object.body,
                            peer_id = update.object.peer_id
                        ),)

    async def handle_end_game(self, update: Update, current_table: Table, keyboard):
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
        await self.app.store.blackjack.set_table_state(current_table.id, TableState.END_GAME.str)
        user = await self.app.store.blackjack.get_user_by_id(update.object.user_id)
        text = f"–ò–≥—Ä–æ–∫ @id{user.vk_id} ({user.username}) –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –º–∞—Ç—á!\n"

        # –≤—ã—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
        await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=text,#update.object.body,
                            peer_id = update.object.peer_id
                        ),keyboard=keyboard)


    async def handle_registration(self, update: Update, current_table: Table):
        vk_id = update.object.user_id
        username = await self.app.store.vk_api.get_username(update.object.user_id)
        await self.app.store.blackjack.create_user(User(vk_id, username, str({}), 1000, 0))
        await self.app.store.blackjack.create_player(Player(vk_id, current_table.id, Deck(), PlayerState.WAITING_TURN.str, 0))
        
        event_data = {"type": "show_snackbar",
                      "text": "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å"}
        params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                  "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
        await self.app.store.vk_api.send_snackbar(params, event_data)

        await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=f"@id{vk_id} ({username}) —Å–∞–¥–∏—Ç—Å—è –∑–∞ —Å—Ç–æ–ª!\n",
                            peer_id = update.object.peer_id
                        ),)

    async def handle_start_game(self, update: Update, current_table: Table, keyboard):
        players = await self.app.store.blackjack.get_players_on_table(current_table.id)
        text = "–ü–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏ –∏–≥—Ä–æ–∫–∞–º –≤—ã–ø–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã:\n"
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–¥—É
        deck = current_table.deck

        for i, player in enumerate(players):
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫—Ä–æ–º–µ –¥–∏–ª–ª–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∞
            if player.vk_id != 1:
                await self.app.store.blackjack.set_player_state(player.vk_id, player.table_id, PlayerState.WAITING_TURN.str)
            
            # –í—ã—Å—ã–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
            text += f"{i+1}. @id{player.vk_id} ({user.username})\n"
            cards = Deck()
            
            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –¥–∏–ª–ª–µ—Ä–∞
            if player.vk_id == 1:
                for i in range(1):
                    card = deck.deck.pop()
                    cards.deck.append(card)
                    text += f"üìú {card}\n"
            else:    
                for i in range(2):
                    card = deck.deck.pop()
                    cards.deck.append(card)
                    text += f"üìú {card}\n"
        
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã –≤ –ë–î –∏–≥—Ä–æ–∫–∞
            await self.app.store.blackjack.set_player_cards(player.vk_id, player.table_id, cards)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–¥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ –≤–∑—è—Ç—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
        await self.app.store.blackjack.set_table_cards(current_table.id, deck)

        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º
        player = await self.app.store.blackjack.get_next_waiting_player(current_table.id)
        await self.app.store.blackjack.set_player_state(player.vk_id,player.table_id, PlayerState.TURN_ACTIVE.str)

        user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
        text += f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞ @id{user.vk_id} ({user.username}) !"

        await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=text,#update.object.body,
                            peer_id = update.object.peer_id
                        ), keyboard=keyboard)

    async def handle_stop_reg(self, update: Update, current_table: Table, keyboard):
        # TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–µ–π—Å –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
        players = await self.app.store.blackjack.get_players_on_table(current_table.id)
        if len(players) == 0:
            text = "–ù–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!\n" 
            await self.app.store.vk_api.send_message(
                            Message(
                                user_id=update.object.user_id,
                                text=text,#update.object.body,
                                peer_id = update.object.peer_id
                            ),)
        else:
            # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
            await self.app.store.blackjack.set_table_state(current_table.id, TableState.STOP_REG.str)
            
            # —Å–æ–∑–¥–∞–µ–º –¥–∏–ª–ª–µ—Ä–∞
            await self.app.store.blackjack.create_player(Player(1, current_table.id, [], PlayerState.TURN_ENDED.str, 0))

            # –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            players = await self.app.store.blackjack.get_players_on_table(current_table.id)
            text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–∫–æ–Ω—á–µ–Ω–∞.\n–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n"        
            for i, player in enumerate(players):
                user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
                text += f"{i+1}. @id{player.vk_id} ({user.username})\n"

            await self.app.store.vk_api.send_message(
                            Message(
                                user_id=update.object.user_id,
                                text=text,#update.object.body,
                                peer_id = update.object.peer_id
                            ),
                            keyboard = keyboard)

    async def handle_start_reg(self, update: Update, current_table: Table, keyboard):
        # —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –Ω–µ–º –∫–æ–ª–æ–¥—É-—Å—Ç–µ–∫
        #deck = Deck()
        await self.app.store.blackjack.set_table_state(id=current_table.id, state=TableState.START_REG.str)
        await self.app.store.vk_api.send_message(
                Message(
                    user_id=1,
                    text="–ü—Ä–∏–≤–µ—Ç, –°—ã–≥—Ä–∞–µ–º –≤ BlackJack?",
                    peer_id = update.object.peer_id
                ),
                keyboard=keyboard)

    async def end_turn(self, update: Update, current_table: Table):
        vk_id = update.object.user_id
        peer_id = current_table.id
        player = await self.app.store.blackjack.get_player_by_id(vk_id, peer_id)

        if player.state == PlayerState.TURN_ACTIVE.str:
            # –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            await self.app.store.blackjack.set_player_state(vk_id, peer_id, PlayerState.TURN_ENDED.str)
            user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
            cards = player.cards.deck
            text = f"–ò–≥—Ä–æ–∫ @id{vk_id} ({user.username}) –∑–∞–≤—Ä–µ—à–∏–ª —Ö–æ–¥ —Å –∫–∞—Ä—Ç–∞–º–∏:\n"

            for card in cards:
                    text += f"üìú {card}\n"

            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å c–ª–µ–¥—É—é—â–∏–º
            next_player = await self.app.store.blackjack.get_next_waiting_player(current_table.id)
            if next_player is not None:
                await self.app.store.blackjack.set_player_state(next_player.vk_id,next_player.table_id, PlayerState.TURN_ACTIVE.str)
                next_user = await self.app.store.blackjack.get_user_by_id(next_player.vk_id)
                text += f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞ @id{next_user.vk_id} ({next_user.username}) !"

            await self.app.store.vk_api.send_message(
                            Message(
                                user_id=update.object.user_id,
                                text=text,#update.object.body,
                                peer_id = update.object.peer_id
                            ))   

            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ –∫–æ–Ω—Ü–µ —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": "–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ö–æ–¥"}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)

            # TODO: –µ—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 2, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 3 –∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏
            players = await self.app.store.blackjack.get_players_on_table(peer_id)
            if await self.check_all_players_state(players, PlayerState.TURN_ENDED):
                await self.summarize(update, current_table)

        elif player.state == PlayerState.WAITING_TURN.str:
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": f"–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!"}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
        elif player.state == PlayerState.TURN_ENDED.str:
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": "–í–∞—à —Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)
        
    
    async def draw_card(self, update: Update, current_table: Table):
        vk_id = update.object.user_id
        peer_id = current_table.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–¥—É-—Å—Ç–µ–∫
        deck = current_table.deck

        # TODO: –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ 2 —Ç–æ –¥–æ–±—Ä–∞—Ç—å, –∏–Ω–∞—á–µ pass
        player = await self.app.store.blackjack.get_player_by_id(vk_id, peer_id)
        if player.state == PlayerState.TURN_ACTIVE.str or vk_id == 1:
            user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
            text = f"–ò–≥—Ä–æ–∫ @id{vk_id} ({user.username}) –¥–æ–±—Ä–∞–ª –∫–∞—Ä—Ç—É:\n"
            cards = player.cards
            card = deck.deck.pop()
            text += f"üìú {card}\n"
            cards.deck.append(card)

            await self.app.store.blackjack.set_player_cards(vk_id, peer_id, cards)
            await self.app.store.blackjack.set_table_cards(peer_id, deck)

            await self.app.store.vk_api.send_message(
                            Message(
                                user_id=update.object.user_id,
                                text=text,#update.object.body,
                                peer_id = update.object.peer_id
                            ))
            
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ –¥–æ–±–æ—Ä–µ –∫–∞—Ä—Ç—ã
            if vk_id != 1:
                event_data = {"type": "show_snackbar",
                            "text": "–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É"}
                params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                        "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
                await self.app.store.vk_api.send_snackbar(params, event_data)
            # –ï—Å–ª–∏ —Å—É–º–º–∞ –∫–∞—Ä—Ç –±–æ–ª—å—à–µ 21, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 2
            card_values = [card.value for card in cards.deck]
            if sum(card_values) > 20:
                await self.end_turn(update, current_table)
        
        elif player.state == PlayerState.WAITING_TURN.str:
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": f"–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!"}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)

        elif player.state == PlayerState.TURN_ENDED.str:
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": "–í–∞—à —Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)


    async def summarize(self, update: Update, current_table: Table):
        peer_id = current_table.id
        update.object.user_id = 1
        diler = await self.app.store.blackjack.get_player_by_id(1, peer_id)
        
        while sum([card.value for card in diler.cards.deck]) < 14:
            await self.draw_card(update, current_table)
            diler = await self.app.store.blackjack.get_player_by_id(1, peer_id)
        
        # –≤—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ —Ö–æ–¥–∞ –¥–∏–ª–ª–µ—Ä–∞
        cards = diler.cards.deck
        diler_user = await self.app.store.blackjack.get_user_by_id(1)
        text = f"–ò–≥—Ä–æ–∫ @id{diler.vk_id} ({diler_user.username}) –∑–∞–≤—Ä–µ—à–∏–ª —Ö–æ–¥ —Å –∫–∞—Ä—Ç–∞–º–∏:\n"

        for card in cards:
                text += f"üìú {card}\n"

        await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=text,#update.object.body,
                            peer_id = update.object.peer_id
                        ))
    
        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –º–∞—Ç—á–∞
        diler_sum = sum([card.value for card in diler.cards.deck])
        players = await self.app.store.blackjack.get_players_on_table(peer_id)
        text = f"–í—Å–µ –∏–≥—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ö–æ–¥, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        for i, player in enumerate(players):
            if player.vk_id != 1:
                user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
                user_sum = sum([card.value for card in player.cards.deck])
                
                # TODO: —Å–¥–µ–ª–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–∏–ª–ª–µ—Ä–æ–º
                if user_sum > 21:
                    result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üí©"
                elif user_sum == 21 and diler_sum == 21:
                    result = "–ù–∏—á—å—è"
                elif user_sum == 21 and diler_sum != 21:
                    result = "–ü–æ–±–µ–¥–∞ ü•á"
                elif user_sum < 21 and diler_sum > 21:
                    result = "–ü–æ–±–µ–¥–∞ ü•á"
                elif user_sum < 21 and diler_sum == 21:
                    result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üí©"
                elif user_sum < 21 and user_sum <= diler_sum:
                    result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üí©"
                elif user_sum < 21 and user_sum > diler_sum:
                    result = "–ü–æ–±–µ–¥–∞ ü•á"
                
                bet = player.bet
                # TODO: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥—É –≤ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—è, –∏–∑–º–µ–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫
                if result == "–ü–æ–±–µ–¥–∞ ü•á":
                    await self.app.store.blackjack.add_win_to_user(player.vk_id)
                    await self.app.store.blackjack.set_user_cash(player.vk_id, 2*bet)
                    text += f"{i+1}. @id{player.vk_id} ({user.username}) - {result}! + {2*bet}üíµ\n"
                if result == "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üí©":
                    await self.app.store.blackjack.set_user_cash(player.vk_id, -bet)
                    text += f"{i+1}. @id{player.vk_id} ({user.username}) - {result}! - {bet}üíµ\n"
                
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–æ–ª –≤ –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self.app.store.blackjack.set_table_state(peer_id, TableState.END_GAME.str)
        
        keyboard = {  
                    "one_time": False,
                    "inline": False, 
                    "buttons": await self.button_manager(TableState.END_GAME)}
        await self.app.store.vk_api.send_message(
                Message(
                    user_id=1,
                    text=text,
                    peer_id = update.object.peer_id
                ),
                keyboard=keyboard)

    async def check_all_players_state(self, players : list[Player], state: PlayerState) -> bool:
        flag = True
        for player in players:
            if player.state != state.str and player.vk_id != 1:
                flag = False
        return flag

    async def register_bets(self,update: Update, current_table: Table):
        # TODO: —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–µ —Å—Ç–∞–≤–∏—Ç—å
        # –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ /placed_bet
        vk_id = update.object.user_id
        peer_id = current_table.id
        player = await self.app.store.blackjack.get_player_by_id(vk_id, peer_id)

        if player.state == PlayerState.TURN_ACTIVE.str:
            user = await self.app.store.blackjack.get_user_by_id(vk_id)
            val = update.object.body['payload']['bet']
            bet = user.cash*val 
            
            # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –Ω–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞–≤–∫—É
            await self.app.store.blackjack.set_player_state(vk_id, peer_id, PlayerState.TURN_ENDED.str)
            await self.app.store.blackjack.set_player_bet(vk_id, peer_id, bet)
            
            # –í—ã—Å—ã–ª–∞–µ–º snackbar —Å —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç–∞–≤–∫–∏
            event_data = {"type": "show_snackbar",
                        "text": f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏ {bet} üíµ!"}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)
            
            text = f"@id{player.vk_id} ({user.username}) –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É {bet} üíµ!\n"
            text += "\n"

            # get_players_on_table -> –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ state = waiting_turn, –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, 
            #–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ TODO: –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ª–∞
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å c–ª–µ–¥—É—é—â–∏–º
            next_player = await self.app.store.blackjack.get_next_waiting_player(current_table.id)
            if next_player is not None:
                await self.app.store.blackjack.set_player_state(next_player.vk_id,next_player.table_id, PlayerState.TURN_ACTIVE.str)
                next_user = await self.app.store.blackjack.get_user_by_id(next_player.vk_id)
                text += f"–•–æ–¥ –∏–≥—Ä–æ–∫–∞ @id{next_user.vk_id} ({next_user.username}) !"

            # –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞–≤–∫–µ –≤ —á–∞—Ç
            await self.app.store.vk_api.send_message(
                    Message(
                        user_id=1,
                        text=text,
                        peer_id = update.object.peer_id
                    ),)

            if next_player is None:
                # TODO: –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª –≤ —Ñ–∞–∑—É –∫–æ–Ω—Ü–∞ —Å—Ç–∞–≤–æ–∫
                await self.handle_stop_bets(update, current_table)


        elif player.state == PlayerState.WAITING_TURN.str:
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": f"–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!"}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)

        elif player.state == PlayerState.TURN_ENDED.str:
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ –∏–≥—Ä–æ–∫ —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª
            event_data = {"type": "show_snackbar",
                        "text": f"–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É {player.bet} üíµ!"}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)

    async def handle_stop_bets(self, update: Update, current_table: Table):
        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ª–∏ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏
        players = await self.app.store.blackjack.get_players_on_table(current_table.id)
        if await self.check_all_players_state(players, PlayerState.TURN_ENDED):
            # —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª –≤ —Å–æ—Å–æ—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—Ü —Å—Ç–∞–≤–æ–∫
            await self.app.store.blackjack.set_table_state(current_table.id, TableState.STOP_BETS.str)
            text = "–§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–ò–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞–≤–∫–∏:\n"
            for i, player in enumerate(players):
                if player.vk_id != 1:
                    user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
                    text += f"{i}. @id{player.vk_id} ({user.username}) - {player.bet} üíµ!\n"
                    
            keyboard = {  
                        "one_time": False,
                        "inline": False, 
                        "buttons": await self.button_manager(TableState.STOP_BETS)}
            await self.app.store.vk_api.send_message(
                    Message(
                        user_id=1,
                        text=text,
                        peer_id = update.object.peer_id
                    ),
                    keyboard=keyboard)
        else:
            await self.app.store.vk_api.send_message(
                    Message(
                        user_id=1,
                        text="–ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫–∏!",
                        peer_id = update.object.peer_id
                    ),)


    async def handle_start_bets(self, update: Update, current_table: Table, keyboard):
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–æ–ª –≤ —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
        await self.app.store.blackjack.set_table_state(current_table.id, TableState.START_BETS.str)
        
        players = await self.app.store.blackjack.get_players_on_table(current_table.id)
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ñ–∞–∑—É —Å—Ç–∞–≤–æ–∫
        for i, player in enumerate(players):
            if player.vk_id != 1:
                await self.app.store.blackjack.set_player_state(player.vk_id,player.table_id, PlayerState.WAITING_TURN.str)
        
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –ø–µ—Ä–≤—ã–º
        player = await self.app.store.blackjack.get_next_waiting_player(current_table.id)
        await self.app.store.blackjack.set_player_state(player.vk_id,player.table_id, PlayerState.TURN_ACTIVE.str)

        user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
        text = f"–†–∞–∑–º–µ—â–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏!\n–í–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ –æ—Ç —Ç–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞!\n–•–æ–¥ –∏–≥—Ä–æ–∫–∞ @id{user.vk_id} ({user.username}) !"
        await self.app.store.vk_api.send_message(
                Message(
                    user_id=1,
                    text=text,
                    peer_id = update.object.peer_id
                ),
                keyboard=keyboard)

