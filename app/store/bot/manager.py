import typing
import random
from logging import getLogger

from app.store.vk_api.dataclasses import Update, Message
from app.blackjack.models import User, Player, Table
from app.store.bot.state import TableState
from app.store.bot.deck import Deck

if typing.TYPE_CHECKING:
    from app.web.app import Application


class BotManager:
    def __init__(self, app: "Application"):
        self.app = app
        self.bot = None
        self.logger = getLogger("handler")
        self.table_states = ['/start_reg', '/stop_reg', '/start_game', '/stop_game']
        #self.statemanager = StateManager(self.app.store.blackjack)

    async def handle_updates(self, updates: list[Update]):
        for update in updates:
            table_context = await self.app.store.blackjack.get_table_state(update.object.peer_id)
            if table_context is None:
                await self.app.store.blackjack.create_table(id=update.object.peer_id, deck = [], state=TableState.WAITING_REG.str)
                table_context = await self.app.store.blackjack.get_table_state(update.object.peer_id)
            if table_context.state == TableState.END_GAME.str:
                await self.app.store.blackjack.delete_table(update.object.peer_id)
                await self.app.store.blackjack.create_table(id=update.object.peer_id, deck = [], state=TableState.WAITING_REG.str)
                table_context = await self.app.store.blackjack.get_table_state(update.object.peer_id)
            
            

            table_state = TableState(table_context.state)
            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
            if update.type == 'message_event':
                button_type = update.object.body['payload']['button']
                if button_type == "reg":
                    await self.handle_registration(update)
                if button_type == "add_card":
                    await self.draw_card(update)
                if button_type == "end_turn":
                    await self.end_turn(update)

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —á–∞—Ç–∞
            if update.type == 'message_new':
                command = update.object.body["message"]["text"]
                if await self.check_state(command, table_state):
                    update_handler = await self.context_manager(TableState(command))
                    await update_handler(update)
                # TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                #    if command == TableState.START_REG.str:
                #        await self.handle_start_reg(update)
                #    elif command == TableState.STOP_REG.str:
                #        await self.handle_stop_reg(update)
                #    elif command == TableState.START_GAME.str:
                #        await self.game_process(update)
                #    else:
                #        await self.app.store.vk_api.send_message(
                #            Message(
                #                user_id=update.object.user_id,
                #                text="test",#update.object.body,
                #                peer_id = update.object.peer_id
                #            )
                #        )
                else:
                    text = f"–û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É {table_state.next_state}"
                    await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=text,#update.object.body,
                            peer_id = update.object.peer_id
                        ))
                    print(1)

    async def context_manager(self, table_state: TableState):
        function_to_call = {TableState.START_REG: self.handle_start_reg,
                            TableState.STOP_REG: self.handle_stop_reg,
                            TableState.START_GAME: self.game_process, 
                            TableState.END_GAME: None,}
        return function_to_call[table_state]

    async def check_state(self, command: str, table_state: TableState) -> bool:
        return command in table_state.next_state

    async def handle_registration(self, update: Update):
        vk_id = update.object.user_id
        username = await self.app.store.vk_api.get_username(update.object.user_id)
        await self.app.store.blackjack.create_user(User(vk_id, username, info=str({})))
        await self.app.store.blackjack.create_player(Player(vk_id, update.object.peer_id, 0, 0, [], 0))
        event_data = {"type": "show_snackbar",
                      "text": "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å"}
        params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                  "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
        await self.app.store.vk_api.send_snackbar(params, event_data)

    async def game_process(self, update: Update):
        players = await self.app.store.blackjack.get_players_on_table(update.object.peer_id)
        text = "–ü–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏ –∏–≥—Ä–æ–∫–∞–º –≤—ã–ø–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã:\n"
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–¥—É
        table = await self.app.store.blackjack.get_table_by_id(update.object.peer_id)
        deck = table.deck

        for i, player in enumerate(players):
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫—Ä–æ–º–µ –¥–∏–ª–ª–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 1
            if player.vk_id != 1:
                await self.app.store.blackjack.set_player_state(player.vk_id, player.table_id, 1)
            
            # –í—ã—Å—ã–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
            text += f"{i+1}. @id{player.vk_id} ({user.username})\n"
            cards = []
            
            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –¥–∏–ª–ª–µ—Ä–∞
            if player.vk_id == 1:
                for i in range(1):
                    card = deck.pop()
                    cards.append(card)
                    text += f"üìú {card}\n"
            else:    
                for i in range(2):
                    card = deck.pop()
                    cards.append(card)
                    text += f"üìú {card}\n"
        
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã –≤ –ë–î –∏–≥—Ä–æ–∫–∞
            await self.app.store.blackjack.set_player_cards(player.vk_id, player.table_id, cards)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–¥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ –≤–∑—è—Ç—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
        await self.app.store.blackjack.set_table_cards(update.object.peer_id, deck)

        button1 ={"color": "positive",
            "action":{  
            "type":"callback",
            "payload":{"button":"add_card"},
            "label":"–î–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É"}
                }
        button2 ={"color": "negative",
            "action":{  
            "type":"callback",
            "payload":{"button":"end_turn"},
            "label":"–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥"}
                }
        buttons = [[button1, button2]]
        keyboard = {  
            "one_time": False,
            "inline": False, 
            "buttons": buttons}

        await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=text,#update.object.body,
                            peer_id = update.object.peer_id
                        ), keyboard=keyboard)

    async def handle_stop_reg(self, update: Update):
        # TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–µ–π—Å –∫–æ–≥–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
        await self.app.store.blackjack.set_table_state(update.object.peer_id, TableState.STOP_REG.str)
        
        # —Å–æ–∑–¥–∞–µ–º –¥–∏–ª–ª–µ—Ä–∞
        await self.app.store.blackjack.create_player(Player(1, update.object.peer_id, 0, 0, [], 2))

        # –í—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        players = await self.app.store.blackjack.get_players_on_table(update.object.peer_id)
        text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–∫–æ–Ω—á–µ–Ω–∞.\n–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n"        
        for i, player in enumerate(players):
            user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
            text += f"{i+1}. @id{player.vk_id} ({user.username})\n"
        keyboard = {  
            "one_time": False,
            "inline": False, 
            "buttons": []}
        await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=text,#update.object.body,
                            peer_id = update.object.peer_id
                        ),
                        keyboard = keyboard
                    )

    async def handle_start_reg(self, update: Update):
        # —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –Ω–µ–º –∫–æ–ª–æ–¥—É-—Å—Ç–µ–∫
        deck = Deck()
        await self.app.store.blackjack.set_table_state(table_id=update.object.peer_id, state=TableState.START_REG.str)
        await self.app.store.blackjack.set_table_cards(table_id=update.object.peer_id, cards=deck.deck)
        button ={"color": "positive",
            "action":{  
            "type":"callback",
            "payload":{"button":"reg"},
            "label":"–°–µ—Å—Ç—å –∑–∞ —Å—Ç–æ–ª"}
                }
        buttons = [[button]]
        keyboard = {  
            "one_time": False,
            "inline": False, 
            "buttons": buttons}
        await self.app.store.vk_api.send_message(
                Message(
                    user_id=1,
                    text="–ü—Ä–∏–≤–µ—Ç, –°—ã–≥—Ä–∞–µ–º –≤ BlackJack?",
                    peer_id = update.object.peer_id
                ),
                keyboard=keyboard)

    async def end_turn(self, update: Update):
        vk_id = update.object.user_id
        peer_id = update.object.peer_id
        player = await self.app.store.blackjack.get_player_by_id(vk_id, peer_id)
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
        if player.state == 2:
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": "–í–∞—à —Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)

            # TODO: –µ—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 2, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 3 –∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏
            players = await self.app.store.blackjack.get_players_on_table(update.object.peer_id)
            if await self.check_all_players_state(players):
                await self.summarize(update)
        else:
            await self.app.store.blackjack.set_player_state(vk_id, peer_id, 2)
            user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
            cards = player.cards
            text = f"–ò–≥—Ä–æ–∫ @id{vk_id} ({user.username}) –∑–∞–≤—Ä–µ—à–∏–ª —Ö–æ–¥ —Å –∫–∞—Ä—Ç–∞–º–∏:\n"

            for card in cards:
                    text += f"üìú {card}\n"

            await self.app.store.vk_api.send_message(
                            Message(
                                user_id=update.object.user_id,
                                text=text,#update.object.body,
                                peer_id = update.object.peer_id
                            ))

            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ –∫–æ–Ω—Ü–µ —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": "–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ö–æ–¥"}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)

            # TODO: –µ—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 2, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 3 –∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏
            players = await self.app.store.blackjack.get_players_on_table(update.object.peer_id)
            if await self.check_all_players_state(players):
                await self.summarize(update)
    

    async def draw_card(self, update: Update):
        vk_id = update.object.user_id
        peer_id = update.object.peer_id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–ª–æ–¥—É-—Å—Ç–µ–∫
        table = await self.app.store.blackjack.get_table_by_id(update.object.peer_id)
        deck = table.deck

        # TODO: –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ 2 —Ç–æ –¥–æ–±—Ä–∞—Ç—å, –∏–Ω–∞—á–µ pass
        player = await self.app.store.blackjack.get_player_by_id(vk_id, peer_id)
        if player.state != 2 or vk_id == 1:
            user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
            text = f"–ò–≥—Ä–æ–∫ @id{vk_id} ({user.username}) –¥–æ–±—Ä–∞–ª –∫–∞—Ä—Ç—É:\n"
            cards = player.cards
            card = deck.pop()
            text += f"üìú {card}\n"
            cards.append(card)

            await self.app.store.blackjack.set_player_cards(vk_id, peer_id, cards)
            await self.app.store.blackjack.set_table_cards(peer_id, deck)

            await self.app.store.vk_api.send_message(
                            Message(
                                user_id=update.object.user_id,
                                text=text,#update.object.body,
                                peer_id = update.object.peer_id
                            ))
            
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ –¥–æ–±–æ—Ä–µ –∫–∞—Ä—Ç—ã
            if vk_id != 1:
                event_data = {"type": "show_snackbar",
                            "text": "–í—ã –¥–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É"}
                params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                        "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
                await self.app.store.vk_api.send_snackbar(params, event_data)
            # –ï—Å–ª–∏ —Å—É–º–º–∞ –∫–∞—Ä—Ç –±–æ–ª—å—à–µ 21, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 2
            card_values = [Deck().get_card_value(card) for card in cards]
            if sum(card_values) > 20:
                await self.end_turn(update)
        
        if player.state == 2:
            # –í—ã—Å—ã–ª–∞–µ–º snackbar –æ —Ç–æ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Ö–æ–¥
            event_data = {"type": "show_snackbar",
                        "text": "–í–∞—à —Ö–æ–¥ –æ–∫–æ–Ω—á–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤."}
            params = {"event_id": update.object.body['event_id'], "user_id":update.object.body['user_id'],
                    "peer_id": update.object.body['peer_id']}#, "event_data": event_data}
            await self.app.store.vk_api.send_snackbar(params, event_data)


    async def summarize(self, update: Update):
        update.object.user_id = 1
        diler = await self.app.store.blackjack.get_player_by_id(1, update.object.peer_id)
        
        while sum([Deck().get_card_value(card) for card in diler.cards]) < 14:
            await self.draw_card(update)
            diler = await self.app.store.blackjack.get_player_by_id(1, update.object.peer_id)
        
        # –≤—ã—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ —Ö–æ–¥–∞ –¥–∏–ª–ª–µ—Ä–∞
        cards = diler.cards
        diler_user = await self.app.store.blackjack.get_user_by_id(1)
        text = f"–ò–≥—Ä–æ–∫ @id{diler.vk_id} ({diler_user.username}) –∑–∞–≤—Ä–µ—à–∏–ª —Ö–æ–¥ —Å –∫–∞—Ä—Ç–∞–º–∏:\n"

        for card in cards:
                text += f"üìú {card}\n"

        await self.app.store.vk_api.send_message(
                        Message(
                            user_id=update.object.user_id,
                            text=text,#update.object.body,
                            peer_id = update.object.peer_id
                        ))
    
        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –º–∞—Ç—á–∞
        diler_sum = sum([Deck().get_card_value(card) for card in diler.cards])
        players = await self.app.store.blackjack.get_players_on_table(update.object.peer_id)
        text = f"–í—Å–µ –∏–≥—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ö–æ–¥, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        for i, player in enumerate(players):
            if player.vk_id != 1:
                user = await self.app.store.blackjack.get_user_by_id(player.vk_id)
                user_sum = sum([Deck().get_card_value(card) for card in player.cards])
                
                # TODO: —Å–¥–µ–ª–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–∏–ª–ª–µ—Ä–æ–º
                if user_sum > 21:
                    result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üí©"
                elif user_sum == 21 and diler_sum == 21:
                    result = "–ù–∏—á—å—è"
                elif user_sum == 21 and diler_sum != 21:
                    result = "–ü–æ–±–µ–¥–∞ ü•á"
                elif user_sum < 21 and diler_sum > 21:
                    result = "–ü–æ–±–µ–¥–∞ ü•á"
                elif user_sum < 21 and diler_sum == 21:
                    result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üí©"
                elif user_sum < 21 and user_sum < diler_sum:
                    result = "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ üí©"
                elif user_sum < 21 and user_sum > diler_sum:
                    result = "–ü–æ–±–µ–¥–∞ ü•á"
                text += f"{i+1}. @id{player.vk_id} ({user.username}) - {result}!\n"
                
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–æ–ª –≤ –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await self.app.store.blackjack.set_table_state(update.object.peer_id, TableState.END_GAME.str)
        
        buttons = []
        keyboard = {  
            "one_time": False,
            "inline": False, 
            "buttons": buttons}
        await self.app.store.vk_api.send_message(
                Message(
                    user_id=1,
                    text=text,
                    peer_id = update.object.peer_id
                ),
                keyboard=keyboard)

    async def check_all_players_state(self, players : list[Player]) -> bool:
        flag = True
        for player in players:
            if player.state != 2:
                flag = False
        return flag


